
dodeque.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <dodeque>:
     DelayedPacket p; 
     int ok_to_drop;
} dodeque_result; 

dodeque_result dodeque ()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    uint64_t now=timestamp();
   c:	b8 00 00 00 00       	mov    $0x0,%eax
  11:	e8 00 00 00 00       	callq  16 <dodeque+0x16>	12: R_X86_64_PC32	timestamp-0x4
  16:	48 98                	cltq   
  18:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    dodeque_result r = { _pdp_deq(), 0 };
  1c:	48 c7 45 e0 00 00 00 00 	movq   $0x0,-0x20(%rbp)
  24:	48 c7 45 e8 00 00 00 00 	movq   $0x0,-0x18(%rbp)
  2c:	48 c7 45 f0 00 00 00 00 	movq   $0x0,-0x10(%rbp)
  34:	b8 00 00 00 00       	mov    $0x0,%eax
  39:	e8 00 00 00 00       	callq  3e <dodeque+0x3e>	3a: R_X86_64_PC32	_pdp_deq-0x4
  3e:	48 98                	cltq   
  40:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (r.p.size == 0 ) {
  44:	8b 45 e8             	mov    -0x18(%rbp),%eax
  47:	85 c0                	test   %eax,%eax
  49:	75 0d                	jne    58 <dodeque+0x58>
          first_above_time = 0;
  4b:	48 c7 05 00 00 00 00 00 00 00 00 	movq   $0x0,0x0(%rip)        # 56 <dodeque+0x56>	4e: R_X86_64_PC32	first_above_time-0x8
  56:	eb 7e                	jmp    d6 <dodeque+0xd6>
    } else {
          uint64_t sojourn_time = now - r.p.release_time;
  58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  60:	48 89 d1             	mov    %rdx,%rcx
  63:	48 29 c1             	sub    %rax,%rcx
  66:	48 89 c8             	mov    %rcx,%rax
  69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
          if (sojourn_time < target || bytes() < maxpacket) {
  6d:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 74 <dodeque+0x74>	70: R_X86_64_PC32	target-0x4
  74:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  78:	72 18                	jb     92 <dodeque+0x92>
  7a:	b8 00 00 00 00       	mov    $0x0,%eax
  7f:	e8 00 00 00 00       	callq  84 <dodeque+0x84>	80: R_X86_64_PC32	bytes-0x4
  84:	0f b7 15 00 00 00 00 	movzwl 0x0(%rip),%edx        # 8b <dodeque+0x8b>	87: R_X86_64_PC32	maxpacket-0x4
  8b:	0f b7 d2             	movzwl %dx,%edx
  8e:	39 d0                	cmp    %edx,%eax
  90:	7d 0d                	jge    9f <dodeque+0x9f>
                // went below so we'll stay below for at least interval
                first_above_time = 0;
  92:	48 c7 05 00 00 00 00 00 00 00 00 	movq   $0x0,0x0(%rip)        # 9d <dodeque+0x9d>	95: R_X86_64_PC32	first_above_time-0x8
  9d:	eb 37                	jmp    d6 <dodeque+0xd6>
          } else {
                if (first_above_time == 0) {
  9f:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # a6 <dodeque+0xa6>	a2: R_X86_64_PC32	first_above_time-0x4
  a6:	48 85 c0             	test   %rax,%rax
  a9:	75 17                	jne    c2 <dodeque+0xc2>
                      // just went above from below. if we stay above
                      // for at least interval we'll say it's ok to drop
                      first_above_time = now + interval;
  ab:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # b2 <dodeque+0xb2>	ae: R_X86_64_PC32	interval-0x4
  b2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  b6:	48 01 d0             	add    %rdx,%rax
  b9:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # c0 <dodeque+0xc0>	bc: R_X86_64_PC32	first_above_time-0x4
  c0:	eb 14                	jmp    d6 <dodeque+0xd6>
                } else if (now >= first_above_time) {
  c2:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # c9 <dodeque+0xc9>	c5: R_X86_64_PC32	first_above_time-0x4
  c9:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  cd:	72 07                	jb     d6 <dodeque+0xd6>
                      r.ok_to_drop = 1;
  cf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
                }
          }
    }
    return r; 
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  de:	48 89 10             	mov    %rdx,(%rax)
  e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  e5:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  ed:	48 89 50 10          	mov    %rdx,0x10(%rax)
}
  f1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f5:	c9                   	leaveq 
  f6:	c3                   	retq   
